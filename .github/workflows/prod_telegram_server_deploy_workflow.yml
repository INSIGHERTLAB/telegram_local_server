name: Insighter PROD deployment
on:
  push:
    branches:
      - main
jobs:
    cleanup:

      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Set short sha
          id: set_sha
          run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

        - name: Load SSH aws key
          uses: webfactory/ssh-agent@v0.9.0
          with:
            ssh-private-key: ${{secrets.PRODUCTION_SERVER_PRIVAT_KEY}}

        - name: Add SSH key to known_hosts
          run: ssh-keyscan -H "${{vars.PRODUCTION_SERVER_HOST}}" >> ~/.ssh/known_hosts

        - name: Create Docker Context
          run: docker context create prod_worker_context --docker "host=ssh://${{ vars.PRODUCTION_SERVER_SSH_ROUTE }}" || true

        - name: Check if services exist
          id: check_services
          run: |
            SERVICES_EXIST=$(docker --context prod_worker_context ps -q --filter "name=telegram-bot-api" --filter "name=nginx_server")
            echo "Services Exist: $SERVICES_EXIST"
            if [ -n "$SERVICES_EXIST" ]; then
              echo "true"
            else
              echo "false"
            fi | tee /tmp/services_exist.txt
            echo "::set-output name=services_exist::$(cat /tmp/services_exist.txt)"

        - name: Cleanup services if they exist
          if: steps.check_services.outputs.services_exist == 'true'
          run: |
            echo "${{ vars.PROD_ENV }}" >> ./deploy/prod/.env
            docker --context prod_worker_context compose -f deploy/prod/docker-compose.yml down
            docker --context prod_worker_context system prune -af
            if ! docker --context prod_worker_context network ls --filter name=insighter_worker_prod_new --format '{{.Name}}' | grep -w insighter_worker_prod_new; then
            docker --context prod_worker_context network create insighter_worker_prod_new
            fi

    deploy_docker:
      runs-on: ubuntu-latest
      needs: cleanup
      steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
            sparse-checkout: |
              deploy/prod/docker-compose.yml
              deploy/prod/nginx/default.conf
            sparse-checkout-cone-mode: false
        - name: Load SSH aws key
          uses: webfactory/ssh-agent@v0.9.0
          with:
            ssh-private-key: ${{secrets.PRODUCTION_SERVER_PRIVAT_KEY}}
        - name: Add SSH key to known_hosts
          run: ssh-keyscan -H "${{vars.PRODUCTION_SERVER_HOST}}" >> ~/.ssh/known_hosts

        - name: Deploy
          run: |
            echo "${{ vars.PROD_ENV }}" >> ./deploy/prod/.env
            docker context create prod_context --docker "host=ssh://${{vars.PRODUCTION_SERVER_SSH_ROUTE}}" || true
            docker --context prod_context compose -f deploy/prod/docker-compose.yml up -d 

    
    
